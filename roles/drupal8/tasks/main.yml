---

- name: Install Drush.
  get_url:
    url: "{{ drush_phar_url }}"
    dest: /usr/local/bin/drush

- name: Ensure Drush is executable.
  file:
    path: /usr/local/bin/drush
    mode: 0755

- name: Install Composer
  get_url:
    url: "{{ composer_phar_url }}"
    dest: /usr/local/bin/composer

- name: Ensure Composer is executable.
  file:
    path: /usr/local/bin/composer
    mode: 0755

- name: Install sendmail
  apt: pkg=sendmail state=latest

- name: ensure sendmail started
  service: name=sendmail state=started enabled=yes


- name: Create druapl home
  file:
    path: "{{ drupal_docroot }}"
    state: directory
    recurse: yes
    owner: "{{ drupal_system_user }}"
    group: "{{ drupal_system_user }}"
    mode: 0755

- name: Drupal | Check if site is already installed
  command: >
    drush status --root={{ drupal_docroot }}
  register: drush_status

- name: Drupal | Get the drupal stable version(8)
  git:
    repo: "https://github.com/drupal/drupal.git"
    version: "{{ drupal_version_branch }}"
    dest: "{{ drupal_docroot }}"
    depth: 1
  when: not drush_status.stdout | search("Drupal bootstrap\s+:\s+Successful")

- name: Drupal | Run composer
  composer:
    command: install
    working_dir: "{{ drupal_docroot }}"
  when: not drush_status.stdout | search("Drupal bootstrap\s+:\s+Successful")

- name: Configure MySQL user for drupal,full access to create database
  mysql_user: name={{ drupal_db.user }} password={{ drupal_db.password }} priv=*.*:ALL host={{ item }} state=present
  with_items:
          - 127.0.0.1
          - localhost

- name: Drupal | Give appropriate permissions for files directory
  file:
    dest: "{{ drupal_docroot }}"
    recurse: yes
    owner: "{{ drupal_system_user }}"
    group: "{{ drupal_system_user }}"
  when: not drush_status.stdout | search("Drupal bootstrap\s+:\s+Successful")

- name: Drupal | Drush site install if not already installed
  command: >
    drush site-install standard -y
    --site-name="{{ drupal_site_name }}"
    --account-name={{ drupal_account_name }}
    --account-pass={{ drupal_account_pass }}
    --db-url=mysql://{{ drupal_db.user }}:{{ drupal_db.password }}@localhost/{{ drupal_db.name }} -y
    -r {{ drupal_docroot }}

  when: not drush_status.stdout | search("Drupal bootstrap\s+:\s+Successful")
  notify: restart nginx

- name: Configure MySQL user for drupal,revoke full access
  mysql_user: name={{ drupal_db.user }} password={{ drupal_db.password }} priv=*.*:USAGE host={{ item }} state=present
  with_items:
          - 127.0.0.1
          - localhost

- name: Configure MySQL user for drupal,restrict access to drupal db
  mysql_user: name={{ drupal_db.user }} password={{ drupal_db.password }} priv={{ drupal_db.name }}.*:ALL host={{ item }} state=present
  with_items:
          - 127.0.0.1
          - localhost

- name: Copy credentials under deploy user
  blockinfile: |
    dest=/home/deploy/.login.txt create=yes
    content="Drupal Admin : {{drupal_account_name}}
    Drupal Admin Pass: {{drupal_account_pass}}
    Mysql user: {{ drupal_mysql_user }}
    MySQL DB: {{ drupal_mysql_db }}
    MySQL Pass: {{ drupal_db.password }} "

- name: Composer | install solr search module
  composer:
    command: show
    arguments: drupal/search_api_solr
    working_dir: "{{ drupal_docroot }}"
  become: true
  become_user: "{{ drupal_system_user }}"
  register: check_module

- name: enable swap | dependencey for composer
  command: "{{ item }}"
  with_items:
    - dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
    - chmod 600 /var/swap.1
    - swapon /var/swap.1
  when: '"Package drupal/search_api_solr not found" in check_module'

- name: Composer | install solr search module
  composer:
    command: require
    arguments: drupal/search_api_solr
    working_dir: "{{ drupal_docroot }}"
  become: true
  become_user: "{{ drupal_system_user }}"
  when: '"Package drupal/search_api_solr not found" in check_module'

- name: disable swap | dependencey for composer
  command: "{{ item }}"
  with_items:
    - swapoff /var/swap.1
    - rm -f /var/swap.1
  when: '"Package drupal/search_api_solr not found" in check_module'

- name: Configure solr
  command: cp -r {{ drupal_docroot }}/modules/contrib/search_api_solr/solr-conf/6.x/ {{solr_home}}/conf/

- name: enable solr module using drush
  shell:
    cmd:  drush en search_api_solr search_api_solr_defaults -y
    chdir: "{{ drupal_docroot }}"

- name: Set permission of druapl home to deploy
  file:
    path: "{{ drupal_docroot }}"
    recurse: yes
    owner: "{{ drupal_system_user }}"
    group: "{{ drupal_system_user }}"
